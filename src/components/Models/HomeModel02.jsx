/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGLTF, useAnimations } from "@react-three/drei";
import React, { useEffect, useRef } from "react";
import * as THREE from "three";

export function HomeModelGirl02() {
  // const { nodes, materials } = useGLTF("./models/cybertruck.gltf");
  // const girlmodel= useGLTF("./models/girlmodel.glb");
  const group = useRef();
  // const previousAction = usePrevious(action);
  const girlmodel = useGLTF("./models/girlmodel.glb");
  const { animations } = useGLTF("./models/girlmodel.glb");
  const { actions } = useAnimations(animations, group);
  // console.log(actions)


  useEffect(() => {
    actions['Idle'].play();
    const Scroll = window.addEventListener('scroll', () => {
      var scrollY = window.scrollY;
      if (scrollY >= 5) {
        actions['Vectory'].play();
        actions['Idle'].stop();
        // actions[previousAction].fadeOut(0.2);
        // actions[action].stop();
      }
      else {
        // actions[action].play();
        // actions[action].fadeIn(0.2);
        actions['Idle'].play();
        actions['Vectory'].stop();
      }
  });

  }, [actions])




  // useEffect(() => {
  //   if (previousAction) {
  //     actions[previousAction].fadeOut(0.2);
  //     actions[action].stop();
  //   }
  //   actions[action].play();
  //   actions[action].fadeIn(0.2);
  // }, [actions, action, previousAction]);


  // const scrollY = window.scrollY;
  // const Scroll= window.addEventListener('scroll',()=>{
  //   var scrollY = window.scrollY;
  //   console.log(scrollY)
  //   if(scrollY>=5)
  //   {
  //   actions['Vectory'].play();
  //   actions['Idle'].stop();
  //    }
  //    else{
  //   actions['Idle'].play();
  //   actions['Vectory'].stop();
  //    }
  // })

  // const ref = useRef();
  // useEffect(() => {
  //   materials.lights.toneMapped = false;
  //   materials.warninglights.toneMapped = false;
  //   materials.warninglights.color = new THREE.Color(82, 0, 0);
  // });
  return (
    <group dispose={null}>
      {/* <primitive
          object={girlmodel.scene}
          scale={3.4}
          position={[0, 0, 0]}
        >
        </primitive> */}
      <group ref={group} dispose={null}>
        <primitive
          object={girlmodel.scene}
          scale={3.4}
        >
        </primitive>
      </group>





      {/* <mesh geometry={nodes.interior001.geometry} material={materials.lights} />
      <mesh geometry={nodes.interior001_1.geometry} castShadow>
        <meshStandardMaterial {...materials.body} />
      </mesh>
      <mesh geometry={nodes.interior001_2.geometry}>
        <meshStandardMaterial
          opacity={0.92}
          envMapIntensity={1}
          transparent
          roughness={0.2}
          color={"black"}
        />
      </mesh>
      <mesh
        geometry={nodes.interior001_3.geometry}
        material={materials.glassframes}
        castShadow
      />
      <mesh
        geometry={nodes.interior001_4.geometry}
        material={materials.warninglights}
      />
      <mesh
        geometry={nodes.interior001_5.geometry}
        material={materials.black}
        castShadow
      />
     

      <mesh geometry={nodes.steer.geometry} material={materials.gray} />
      <mesh
        geometry={nodes.tires001.geometry}
        material={materials.tires}
        castShadow
      />
      <mesh
        geometry={nodes.tires001_1.geometry}
        material={materials.rims}
        castShadow
      /> */}
    </group>

    //  BODY MESH -> SHADER 
    //  <mesh geometry={nodes.interior001_6.geometry}>
    //   <meshBasicMaterial color={"red"}  />
    // </mesh> 
  );
}

useGLTF.preload("./models/girlmodel.glb")

// function usePrevious(value) {
//   const ref = useRef();
//   useEffect(() => {
//     ref.current = value;
//   }, [value]);
//   return ref.current;
// }

// useGLTF.preload("./models/cybertruck.gltf");
